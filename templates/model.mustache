# coding: utf-8

{{>partial_header}}

import pprint
import re  # noqa: F401

import six

{{#models}}
{{#model}}
{{#vendorExtensions.x-opsgenie-success-response}}
import time
import json
import certifi
import urllib3

import opsgenie_sdk
from opsgenie_sdk.models.success_data import SuccessData  # noqa: F401,E501
from opsgenie_sdk.rest import ApiException


{{/vendorExtensions.x-opsgenie-success-response}}{{^vendorExtensions.x-opsgenie-success-response}}
{{/vendorExtensions.x-opsgenie-success-response}}
class {{classname}}(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """{{#allowableValues}}

    """
    allowed enum values
    """
{{#enumVars}}
    {{name}} = {{{value}}}{{^-last}}
{{/-last}}
{{/enumVars}}{{/allowableValues}}

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
{{#vars}}
        '{{name}}': '{{{dataType}}}'{{#hasMore}},{{/hasMore}}
{{/vars}}
    }{{#vendorExtensions.x-opsgenie-success-response}}
    openapi_types['url'] = 'str'{{/vendorExtensions.x-opsgenie-success-response}}

    attribute_map = {
{{#vars}}
        '{{name}}': '{{baseName}}'{{#hasMore}},{{/hasMore}}
{{/vars}}
    }{{#vendorExtensions.x-opsgenie-success-response}}
    attribute_map['url'] = 'url'{{/vendorExtensions.x-opsgenie-success-response}}
{{#discriminator}}

    discriminator_value_class_map = {
        {{#children}}'{{^vendorExtensions.x-discriminator-value}}{{name}}{{/vendorExtensions.x-discriminator-value}}{{#vendorExtensions.x-discriminator-value}}{{{vendorExtensions.x-discriminator-value}}}{{/vendorExtensions.x-discriminator-value}}': '{{{classname}}}'{{^-last}},
        {{/-last}}{{/children}}
    }
{{/discriminator}}

    def __init__(self{{#vars}}, {{name}}={{#defaultValue}}{{{defaultValue}}}{{/defaultValue}}{{^defaultValue}}None{{/defaultValue}}{{/vars}}{{#vendorExtensions.x-opsgenie-success-response}}, url=None{{/vendorExtensions.x-opsgenie-success-response}}):  # noqa: E501
        """{{classname}} - a model defined in OpenAPI"""  # noqa: E501
{{#vars}}{{#-first}}
{{/-first}}
        self._{{name}} = None
{{/vars}}
        self.discriminator = {{#discriminator}}'{{{discriminatorName}}}'{{/discriminator}}{{^discriminator}}None{{/discriminator}}
{{#vars}}{{#-first}}
{{/-first}}
{{#required}}
        self.{{name}} = {{name}}
{{/required}}
{{^required}}
{{#isNullable}}
        self.{{name}} = {{name}}
{{/isNullable}}
{{^isNullable}}
        if {{name}} is not None:
            self.{{name}} = {{name}}
{{/isNullable}}
{{/required}}
{{/vars}}{{#vendorExtensions.x-opsgenie-success-response}}
        if url is not None:
            self.url = url
        else:
            self.url = None

        self._id = None
        self.conf = opsgenie_sdk.configuration.Configuration()
        self.logger = self.conf.logger["package_logger"]{{/vendorExtensions.x-opsgenie-success-response}}
{{#vars}}
    @property
    def {{name}}(self):
        """Gets the {{name}} of this {{classname}}.  # noqa: E501

{{#description}}
        {{{description}}}  # noqa: E501
{{/description}}

        :return: The {{name}} of this {{classname}}.  # noqa: E501
        :rtype: {{dataType}}
        """
        return self._{{name}}

    @{{name}}.setter
    def {{name}}(self, {{name}}):
        """Sets the {{name}} of this {{classname}}.

{{#description}}
        {{{description}}}  # noqa: E501
{{/description}}

        :param {{name}}: The {{name}} of this {{classname}}.  # noqa: E501
        :type: {{dataType}}
        """
{{^isNullable}}
{{#required}}
        if {{name}} is None:
            raise ValueError("Invalid value for `{{name}}`, must not be `None`")  # noqa: E501
{{/required}}
{{/isNullable}}
{{#isEnum}}
{{#isContainer}}
        allowed_values = [{{#isNullable}}None,{{/isNullable}}{{#allowableValues}}{{#values}}{{#items.isString}}"{{/items.isString}}{{{this}}}{{#items.isString}}"{{/items.isString}}{{^-last}}, {{/-last}}{{/values}}{{/allowableValues}}]  # noqa: E501
{{#isListContainer}}
        if not set({{{name}}}).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `{{{name}}}` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set({{{name}}}) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )
{{/isListContainer}}
{{#isMapContainer}}
        if not set({{{name}}}.keys()).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid keys in `{{{name}}}` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set({{{name}}}.keys()) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )
{{/isMapContainer}}
{{/isContainer}}
{{^isContainer}}
        allowed_values = [{{#isNullable}}None,{{/isNullable}}{{#allowableValues}}{{#values}}{{#isString}}"{{/isString}}{{{this}}}{{#isString}}"{{/isString}}{{^-last}}, {{/-last}}{{/values}}{{/allowableValues}}]  # noqa: E501
        if {{{name}}} not in allowed_values:
            raise ValueError(
                "Invalid value for `{{{name}}}` ({0}), must be one of {1}"  # noqa: E501
                .format({{{name}}}, allowed_values)
            )
{{/isContainer}}
{{/isEnum}}
{{^isEnum}}
{{#hasValidation}}
{{#maxLength}}
        if {{name}} is not None and len({{name}}) > {{maxLength}}:
            raise ValueError("Invalid value for `{{name}}`, length must be less than or equal to `{{maxLength}}`")  # noqa: E501
{{/maxLength}}
{{#minLength}}
        if {{name}} is not None and len({{name}}) < {{minLength}}:
            raise ValueError("Invalid value for `{{name}}`, length must be greater than or equal to `{{minLength}}`")  # noqa: E501
{{/minLength}}
{{#maximum}}
        if {{name}} is not None and {{name}} >{{#exclusiveMaximum}}={{/exclusiveMaximum}} {{maximum}}:  # noqa: E501
            raise ValueError("Invalid value for `{{name}}`, must be a value less than {{^exclusiveMaximum}}or equal to {{/exclusiveMaximum}}`{{maximum}}`")  # noqa: E501
{{/maximum}}
{{#minimum}}
        if {{name}} is not None and {{name}} <{{#exclusiveMinimum}}={{/exclusiveMinimum}} {{minimum}}:  # noqa: E501
            raise ValueError("Invalid value for `{{name}}`, must be a value greater than {{^exclusiveMinimum}}or equal to {{/exclusiveMinimum}}`{{minimum}}`")  # noqa: E501
{{/minimum}}
{{#pattern}}
        if {{name}} is not None and not re.search(r'{{{vendorExtensions.x-regex}}}', {{name}}{{#vendorExtensions.x-modifiers}}{{#-first}}, flags={{/-first}}re.{{.}}{{^-last}} | {{/-last}}{{/vendorExtensions.x-modifiers}}):  # noqa: E501
            raise ValueError(r"Invalid value for `{{name}}`, must be a follow pattern or equal to `{{{pattern}}}`")  # noqa: E501
{{/pattern}}
{{#maxItems}}
        if {{name}} is not None and len({{name}}) > {{maxItems}}:
            raise ValueError("Invalid value for `{{name}}`, number of items must be less than or equal to `{{maxItems}}`")  # noqa: E501
{{/maxItems}}
{{#minItems}}
        if {{name}} is not None and len({{name}}) < {{minItems}}:
            raise ValueError("Invalid value for `{{name}}`, number of items must be greater than or equal to `{{minItems}}`")  # noqa: E501
{{/minItems}}
{{/hasValidation}}
{{/isEnum}}

        self._{{name}} = {{name}}

{{/vars}}
{{#discriminator}}
    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_key = self.attribute_map[self.discriminator]
        discriminator_value = data[discriminator_key]
        return self.discriminator_value_class_map.get(discriminator_value)

{{/discriminator}}
{{#vendorExtensions.x-opsgenie-success-response}}
    @property
    def url(self):
        """Gets the url of this SuccessResponse.  # noqa: E501


        :return: The url of this SuccessResponse.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this SuccessResponse.


        :param url: The url of this SuccessResponse.  # noqa: E501
        :type: str
        """

        self._url = url

    def retrieve_result(self):
        conf = self.conf
        api_key = conf.api_key_prefix.get('Authorization') + ' ' + conf.api_key.get('Authorization')
        http = urllib3.PoolManager(cert_reqs='CERT_REQUIRED', ca_certs=certifi.where())
        headers = {
            'Authorization': api_key
        }

        request_url = self._build_request_url_(conf.host)

        attempt_count = 0
        MAX_NUMBER_OF_RETRIES = conf.short_polling_max_retries
        condition = True
        response = None

        while condition:
            if attempt_count > 0:
                time.sleep(2 * attempt_count * 0.2)

            try:
                self.logger.debug(
                    str(attempt_count + 1) + ' attempt to retrieve result with request_id: ' + str(self.request_id))
                response = http.request(method='GET', url=request_url, headers=headers)
            except ApiException as err:
                print("Exception when calling success_response->retrieve_result: %s\n" % err)

            response_headers = response.headers
            if response_headers is not None:
                rate_limit_state = response_headers.get('X-RateLimit-State')
                status_code = response.status

                if rate_limit_state == 'THROTTLED':
                    should_retry = True
                    self.logger.debug('Should retry because X-RateLimit-State is THROTTLED')
                elif status_code == 429:
                    should_retry = True
                    self.logger.debug('Should retry because Status is 429')
                elif 500 <= status_code <= 599:
                    should_retry = True
                    self.logger.debug('Should retry because Status is ' + status_code)
                else:
                    should_retry = False
                    response_body = response.data
                    response_body_decoded = json.loads(response_body)
                    response_body_decoded_data = response_body_decoded.get('data')
                    if response_body_decoded_data is not None:
                        self._id = response_body_decoded_data.get('alertId')
                        if self._id is None:
                            self._id = response_body_decoded_data.get('incidentId')

                attempt_count += 1

                if should_retry and attempt_count < MAX_NUMBER_OF_RETRIES:
                    condition = True
                else:
                    condition = False
            else:
                condition = True

        return response

    def retrieve_resulting_action(self):
        conf = self.conf
        api_key = conf.api_key_prefix.get('Authorization') + ' ' + conf.api_key.get('Authorization')
        http = urllib3.PoolManager(cert_reqs='CERT_REQUIRED', ca_certs=certifi.where())
        headers = {
            'Authorization': api_key
        }

        if self._id is None:
            self.retrieve_result()

        request_url = self._build_request_url_(conf.host)

        try:
            response = http.request(method='GET', url=request_url, headers=headers)

            return response
        except ApiException as err:
            print("Exception when calling success_response->retrieve_result: %s\n" % err)

    def _build_request_url_(self, host):
        if 'alerts' in self.url:
            return host + '/v2/alerts/requests/' + self.request_id
        elif 'incident' in self.url:
            return host + '/v1/incidents/requests/' + self.request_id
        else:
            raise ApiException(reason='Short polling is not currently supported for this domain')

    @property
    def id(self):
        return self._id

{{/vendorExtensions.x-opsgenie-success-response}}
    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}
{{#vendorExtensions.x-opsgenie-success-response}}

        for attr, _ in six.iteritems(self.openapi_types):
            if attr != 'url':
                value = getattr(self, attr)
                if isinstance(value, list):
                    result[attr] = list(map(
                        lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                        value
                    ))
                elif hasattr(value, "to_dict"):
                    result[attr] = value.to_dict()
                elif isinstance(value, dict):
                    result[attr] = dict(map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()
                    ))
                else:
                    result[attr] = value
        if issubclass(SuccessResponse, dict):
            for key, value in self.items():
                result[key] = value
{{/vendorExtensions.x-opsgenie-success-response}}{{^vendorExtensions.x-opsgenie-success-response}}
        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
{{/vendorExtensions.x-opsgenie-success-response}}

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, {{classname}}):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
{{/model}}
{{/models}}
